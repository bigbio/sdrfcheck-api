# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.link import Link
from models.base_model_ import Model
from swagger_server import util
from models.ontology_term import OntologyTerm

class TemplateColumn(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type_node: str=None, ontology_term: OntologyTerm=None, searchable: bool=True, other_search_term: List[OntologyTerm]=None, links: List[Link]=None):  # noqa: E501
        """TemplateColumn - a model defined in Swagger

        :param name: The name of this TemplateColumn.  # noqa: E501
        :type name: str
        :param type_node: The type_node of this TemplateColumn.  # noqa: E501
        :type type_node: str
        :param ontology_term: The ontology_term of this TemplateColumn.  # noqa: E501
        :type ontology_term: OntologyTerm
        :param searchable: The searchable of this TemplateColumn.  # noqa: E501
        :type searchable: bool
        :param other_search_term: The other_search_term of this TemplateColumn.  # noqa: E501
        :type other_search_term: List[OntologyTerm]
        :param links: The links of this TemplateColumn.  # noqa: E501
        :type links: List[Link]
        """
        self.swagger_types = {
            'name': str,
            'type_node': str,
            'ontology_term': OntologyTerm,
            'searchable': bool,
            'other_search_term': List[OntologyTerm],
            'links': List[Link]
        }

        self.attribute_map = {
            'name': 'name',
            'type_node': 'typeNode',
            'ontology_term': 'ontologyTerm',
            'searchable': 'searchable',
            'other_search_term': 'otherSearchTerm',
            'links': 'links'
        }

        self._name = name
        self._type_node = type_node
        self._ontology_term = ontology_term
        self._searchable = searchable
        self._other_search_term = other_search_term
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'TemplateColumn':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TemplateColumn of this TemplateColumn.  # noqa: E501
        :rtype: TemplateColumn
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this TemplateColumn.

        Name of the column  # noqa: E501

        :return: The name of this TemplateColumn.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TemplateColumn.

        Name of the column  # noqa: E501

        :param name: The name of this TemplateColumn.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type_node(self) -> str:
        """Gets the type_node of this TemplateColumn.

        Type of the column  # noqa: E501

        :return: The type_node of this TemplateColumn.
        :rtype: str
        """
        return self._type_node

    @type_node.setter
    def type_node(self, type_node: str):
        """Sets the type_node of this TemplateColumn.

        Type of the column  # noqa: E501

        :param type_node: The type_node of this TemplateColumn.
        :type type_node: str
        """
        if type_node is None:
            raise ValueError("Invalid value for `type_node`, must not be `None`")  # noqa: E501

        self._type_node = type_node

    @property
    def ontology_term(self) -> OntologyTerm:
        """Gets the ontology_term of this TemplateColumn.


        :return: The ontology_term of this TemplateColumn.
        :rtype: OntologyTerm
        """
        return self._ontology_term

    @ontology_term.setter
    def ontology_term(self, ontology_term: OntologyTerm):
        """Sets the ontology_term of this TemplateColumn.


        :param ontology_term: The ontology_term of this TemplateColumn.
        :type ontology_term: OntologyTerm
        """
        if ontology_term is None:
            raise ValueError("Invalid value for `ontology_term`, must not be `None`")  # noqa: E501

        self._ontology_term = ontology_term

    @property
    def searchable(self) -> bool:
        """Gets the searchable of this TemplateColumn.


        :return: The searchable of this TemplateColumn.
        :rtype: bool
        """
        return self._searchable

    @searchable.setter
    def searchable(self, searchable: bool):
        """Sets the searchable of this TemplateColumn.


        :param searchable: The searchable of this TemplateColumn.
        :type searchable: bool
        """

        self._searchable = searchable

    @property
    def other_search_term(self) -> List[OntologyTerm]:
        """Gets the other_search_term of this TemplateColumn.


        :return: The other_search_term of this TemplateColumn.
        :rtype: List[OntologyTerm]
        """
        return self._other_search_term

    @other_search_term.setter
    def other_search_term(self, other_search_term: List[OntologyTerm]):
        """Sets the other_search_term of this TemplateColumn.


        :param other_search_term: The other_search_term of this TemplateColumn.
        :type other_search_term: List[OntologyTerm]
        """

        self._other_search_term = other_search_term

    @property
    def links(self) -> List[Link]:
        """Gets the links of this TemplateColumn.


        :return: The links of this TemplateColumn.
        :rtype: List[Link]
        """
        return self._links

    @links.setter
    def links(self, links: List[Link]):
        """Sets the links of this TemplateColumn.


        :param links: The links of this TemplateColumn.
        :type links: List[Link]
        """

        self._links = links
